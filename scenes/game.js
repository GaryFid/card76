const { Scenes, Markup } = require('telegraf');
const Game = require('../models/game');
const { canPlayCard, aiMove, updateRatings } = require('../utils/gameUtils');

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –∏–≥—Ä—ã
const gameScene = new Scenes.BaseScene('game');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞
function renderPlayerCards(cards) {
  if (!cards || cards.length === 0) return '–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç';
  
  return cards.map((card, index) => `${index + 1}. ${card.name}`).join('\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
async function renderGameState(ctx) {
  try {
    const game = await Game.findById(ctx.session.gameId)
      .populate('players.userId', 'telegram.username google.name yandex.name');
    
    if (!game) {
      await ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
      return ctx.scene.enter('menu');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ
    const topCard = game.discardPile.length > 0 ? game.discardPile[game.discardPile.length - 1] : null;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    const currentPlayerIndex = game.currentPlayer;
    const currentPlayer = game.players[currentPlayerIndex];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    let currentPlayerName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
    
    if (currentPlayer.isBot) {
      currentPlayerName = `–ë–æ—Ç ${currentPlayerIndex + 1}`;
    } else if (currentPlayer.userId) {
      if (currentPlayer.userId.telegram && currentPlayer.userId.telegram.username) {
        currentPlayerName = currentPlayer.userId.telegram.username;
      } else if (currentPlayer.userId.google && currentPlayer.userId.google.name) {
        currentPlayerName = currentPlayer.userId.google.name;
      } else if (currentPlayer.userId.yandex && currentPlayer.userId.yandex.name) {
        currentPlayerName = currentPlayer.userId.yandex.name;
      }
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIndex = game.players.findIndex(player => 
      player.userId && player.userId._id.equals(ctx.session.user._id)
    );
    
    if (userIndex === -1) {
      await ctx.reply('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
      return ctx.scene.enter('menu');
    }
    
    const userCards = game.players[userIndex].cards;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    let gameStateText = `üéÆ *–ò–≥—Ä–∞ "–†–∞–∑–≥–∏–ª—å–¥—è–π"*\n\n`;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–æ–≤
    gameStateText += '*–ò–≥—Ä–æ–∫–∏ –∏ –∏—Ö –∫–∞—Ä—Ç—ã:*\n';
    game.players.forEach((player, index) => {
      let playerName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
      
      if (player.isBot) {
        playerName = `–ë–æ—Ç ${index + 1}`;
      } else if (player.userId) {
        if (player.userId.telegram && player.userId.telegram.username) {
          playerName = player.userId.telegram.username;
        } else if (player.userId.google && player.userId.google.name) {
          playerName = player.userId.google.name;
        } else if (player.userId.yandex && player.userId.yandex.name) {
          playerName = player.userId.yandex.name;
        }
      }
      
      const isCurrentPlayer = index === currentPlayerIndex;
      const cardCount = player.cards.length;
      
      gameStateText += `${isCurrentPlayer ? 'üëâ ' : ''}${playerName}: ${cardCount} –∫–∞—Ä—Ç${isCurrentPlayer ? ' (—Ö–æ–¥–∏—Ç)' : ''}\n`;
    });
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–µ
    gameStateText += `\n*–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:* ${topCard ? topCard.name : '–ù–µ—Ç –∫–∞—Ä—Ç'}\n`;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ
    gameStateText += `*–ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ:* ${game.deck.length}\n\n`;
    
    // –ï—Å–ª–∏ —Ö–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isUserTurn = userIndex === currentPlayerIndex;
    
    if (isUserTurn) {
      gameStateText += '*–í–∞—à —Ö–æ–¥!*\n\n';
    } else {
      gameStateText += `*–•–æ–¥ –∏–≥—Ä–æ–∫–∞:* ${currentPlayerName}\n\n`;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    gameStateText += '*–í–∞—à–∏ –∫–∞—Ä—Ç—ã:*\n';
    gameStateText += renderPlayerCards(userCards);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    let replyMarkup;
    
    if (isUserTurn) {
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
      const cardButtons = userCards.map((card, index) => 
        Markup.button.callback(card.name, `play_${index}`)
      );
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
      const buttonRows = [];
      for (let i = 0; i < cardButtons.length; i += 3) {
        buttonRows.push(cardButtons.slice(i, i + 3));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      buttonRows.push([
        Markup.button.callback('–í–∑—è—Ç—å –∏–∑ –∫–æ–ª–æ–¥—ã', 'draw_card'),
        Markup.button.callback('–°—ã–≥—Ä–∞—Ç—å', 'play_selected'),
        Markup.button.callback('–ü–æ–ª–æ–∂–∏—Ç—å —Å–µ–±–µ', 'put_self')
      ]);
      
      replyMarkup = Markup.inlineKeyboard(buttonRows);
    } else {
      replyMarkup = Markup.inlineKeyboard([
        [Markup.button.callback('–û–±–Ω–æ–≤–∏—Ç—å', 'refresh_game')]
      ]);
    }
    
    await ctx.reply(gameStateText, {
      parse_mode: 'Markdown',
      ...replyMarkup
    });
    
    // –ï—Å–ª–∏ —Ö–æ–¥ –±–æ—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º —Ö–æ–¥
    if (currentPlayer.isBot) {
      setTimeout(async () => {
        await makeBotMove(ctx, game, currentPlayerIndex);
      }, 2000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –±–æ—Ç–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    }
    
    return game;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–æ–¥–∞ –±–æ—Ç–∞
async function makeBotMove(ctx, game, botIndex) {
  try {
    const bot = game.players[botIndex];
    const topCard = game.discardPile.length > 0 ? game.discardPile[game.discardPile.length - 1] : null;
    let madeTurn = false;
    
    // –ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Ö–æ–¥—ã, –ø–æ–∫–∞ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–∞—Ä—Ç–∞
    do {
      // –ò—â–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —Ö–æ–¥–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã
      const botCard = aiMove(bot.cards, topCard, game.gameStage || 'stage1');
      
      if (botCard) {
        // –ë–æ—Ç –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
        const cardIndex = bot.cards.findIndex(card => 
          card.suit === botCard.suit && card.value === botCard.value
        );
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –±–æ—Ç–∞
        const playedCard = bot.cards.splice(cardIndex, 1)[0];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–±—Ä–æ—Å
        game.discardPile.push(playedCard);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const newTopCard = playedCard;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏ –±–æ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ö–æ–¥–µ –±–æ—Ç–∞
        await ctx.reply(`–ë–æ—Ç ${botIndex + 1} —Å—ã–≥—Ä–∞–ª –∫–∞—Ä—Ç—É ${playedCard.name}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –∫–∞—Ä—Ç—ã
        if (bot.cards.length === 0) {
          // –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª
          game.status = 'finished';
          game.winner = null; // –£ –±–æ—Ç–∞ –Ω–µ—Ç userId
          
          await game.save();
          
          await ctx.reply(`–ë–æ—Ç ${botIndex + 1} –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É!`);
          setTimeout(() => ctx.scene.enter('menu'), 3000);
          return;
        }
        
        // –ë–æ—Ç –±–µ—Ä–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –ø–æ—Å–ª–µ —Ö–æ–¥–∞
        if (game.deck.length === 0) {
          // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–±—Ä–æ—Å, –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
          if (game.discardPile.length > 1) {
            const topCard = game.discardPile.pop();
            game.deck = shuffleDeck(game.discardPile);
            game.discardPile = [topCard];
          }
        }
        
        if (game.deck.length > 0) {
          // –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
          const newCard = game.deck.pop();
          bot.cards.push(newCard);
          
          await ctx.reply(`–ë–æ—Ç ${botIndex + 1} –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã`);
        }
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ö–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω
        madeTurn = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ö–æ–¥–æ–≤
        await ctx.reply(`–ë–æ—Ç ${botIndex + 1} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥...`);
      } else {
        // –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥, –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—É
        if (game.deck.length === 0) {
          // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–±—Ä–æ—Å, –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
          if (game.discardPile.length > 1) {
            const topCard = game.discardPile.pop();
            game.deck = shuffleDeck(game.discardPile);
            game.discardPile = [topCard];
          }
        }
        
        if (game.deck.length > 0) {
          // –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
          const newCard = game.deck.pop();
          bot.cards.push(newCard);
          
          await ctx.reply(`–ë–æ—Ç ${botIndex + 1} –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –∏ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã`);
        } else {
          await ctx.reply(`–ë–æ—Ç ${botIndex + 1} –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥, –∞ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞`);
        }
        
        // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –µ–≥–æ —Ö–æ–¥—ã
        madeTurn = false;
      }
      
      // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–º–ø–∞ –∏–≥—Ä—ã
      await new Promise(resolve => setTimeout(resolve, 5000));
      
    } while (madeTurn && bot.cards.length > 0);
    
    // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    game.currentPlayer = (game.currentPlayer + 1) % game.players.length;
    
    await game.save();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await renderGameState(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ö–æ–¥–∞ –±–æ—Ç–∞:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
gameScene.enter(async (ctx) => {
  await ctx.reply('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!', {
    reply_markup: {
      keyboard: [
        ['–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã', '–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥'],
        ['–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É']
      ],
      resize_keyboard: true
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
gameScene.action('refresh_game', async (ctx) => {
  await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É...');
  await renderGameState(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É"
gameScene.action('draw_card', async (ctx) => {
  try {
    await ctx.answerCbQuery('–ë–µ—Ä–µ–º –∫–∞—Ä—Ç—É...');
    
    const game = await Game.findById(ctx.session.gameId);
    
    if (!game) {
      await ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
      return ctx.scene.enter('menu');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIndex = game.players.findIndex(player => 
      player.userId && player.userId.equals(ctx.session.user._id)
    );
    
    if (userIndex === -1 || game.currentPlayer !== userIndex) {
      return ctx.answerCbQuery('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ
    if (game.deck.length === 0) {
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–±—Ä–æ—Å, –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
      if (game.discardPile.length > 1) {
        const topCard = game.discardPile.pop();
        game.deck = shuffleDeck(game.discardPile);
        game.discardPile = [topCard];
      } else {
        return ctx.answerCbQuery('–í –∫–æ–ª–æ–¥–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–∞—Ä—Ç!');
      }
    }
    
    // –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
    const newCard = game.deck.pop();
    game.players[userIndex].cards.push(newCard);
    
    // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    game.currentPlayer = (game.currentPlayer + 1) % game.players.length;
    
    await game.save();
    
    await ctx.reply(`–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É: ${newCard.name}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await renderGameState(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫–∞—Ä—Ç—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —Ö–æ–¥–∞
gameScene.action(/^play_(\d+)$/, async (ctx) => {
  try {
    const cardIndex = parseInt(ctx.match[1]);
    
    const game = await Game.findById(ctx.session.gameId);
    
    if (!game) {
      await ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
      return ctx.scene.enter('menu');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIndex = game.players.findIndex(player => 
      player.userId && player.userId.equals(ctx.session.user._id)
    );
    
    if (userIndex === -1 || game.currentPlayer !== userIndex) {
      return ctx.answerCbQuery('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userCards = game.players[userIndex].cards;
    
    if (cardIndex < 0 || cardIndex >= userCards.length) {
      return ctx.answerCbQuery('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã!');
    }
    
    const selectedCard = userCards[cardIndex];
    const topCard = game.discardPile.length > 0 ? game.discardPile[game.discardPile.length - 1] : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å—ã–≥—Ä–∞—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
    if (!canPlayCard(selectedCard, topCard)) {
      return ctx.answerCbQuery('–≠—Ç–æ–π –∫–∞—Ä—Ç–æ–π –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã.');
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
    const playedCard = userCards.splice(cardIndex, 1)[0];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–±—Ä–æ—Å
    game.discardPile.push(playedCard);
    
    await ctx.answerCbQuery(`–í—ã —Å—ã–≥—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: ${playedCard.name}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –∫–∞—Ä—Ç—ã —É –∏–≥—Ä–æ–∫–∞
    if (userCards.length === 0) {
      // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
      game.status = 'finished';
      game.winner = ctx.session.user._id;
      
      await game.save();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
      await updateRatings(ctx.session.user._id, game.players);
      
      await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É! üéâ');
      setTimeout(() => ctx.scene.enter('menu'), 3000);
      return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    game.currentPlayer = (game.currentPlayer + 1) % game.players.length;
    
    await game.save();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await renderGameState(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–æ–¥–µ –∫–∞—Ä—Ç–æ–π:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–æ–¥–µ –∫–∞—Ä—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
gameScene.command('exit', async (ctx) => {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
    const game = await Game.findById(ctx.session.gameId);
    
    if (game) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞
      if (game.status === 'active') {
        game.status = 'finished';
        await game.save();
      }
    }
    
    await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
    return ctx.scene.enter('menu');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
    return ctx.scene.enter('menu');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—ã–≥—Ä–∞—Ç—å"
gameScene.action('play_selected', async (ctx) => {
  try {
    await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –∏–≥—Ä—ã...');
    
    const game = await Game.findById(ctx.session.gameId);
    
    if (!game) {
      await ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
      return ctx.scene.enter('menu');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIndex = game.players.findIndex(player => 
      player.userId && player.userId.equals(ctx.session.user._id)
    );
    
    if (userIndex === -1 || game.currentPlayer !== userIndex) {
      return ctx.answerCbQuery('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
    }
    
    // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É
    // –°–∞–º–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å.');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await renderGameState(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–æ–∂–∏—Ç—å —Å–µ–±–µ"
gameScene.action('put_self', async (ctx) => {
  try {
    await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å —Å–µ–±–µ...');
    
    const game = await Game.findById(ctx.session.gameId);
    
    if (!game) {
      await ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
      return ctx.scene.enter('menu');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIndex = game.players.findIndex(player => 
      player.userId && player.userId.equals(ctx.session.user._id)
    );
    
    if (userIndex === -1 || game.currentPlayer !== userIndex) {
      return ctx.answerCbQuery('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
    }
    
    // –ü–æ–º–µ—á–∞–µ–º –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã - –¥–ª—è –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ–±–µ
    ctx.session.putSelf = true;
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å —Å–µ–±–µ.');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await renderGameState(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–µ–±—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

module.exports = { gameScene }; 