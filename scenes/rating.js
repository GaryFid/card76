const { Scenes, Markup } = require('telegraf');
const User = require('../models/user');

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É —Ä–µ–π—Ç–∏–Ω–≥–∞
const ratingScene = new Scenes.BaseScene('rating');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
ratingScene.enter(async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    const topPlayers = await User.find({
      gamesPlayed: { $gt: 0 }
    })
    .sort({ rating: -1 })
    .limit(10);
    
    if (topPlayers.length === 0) {
      await ctx.reply(
        '–í –∏–≥—Ä–µ –µ—â–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.',
        Markup.keyboard([['¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]).resize()
      );
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    let message = 'üèÜ *–†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤:*\n\n';
    
    topPlayers.forEach((player, index) => {
      let playerName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
      
      if (player.telegram && player.telegram.username) {
        playerName = player.telegram.username;
      } else if (player.google && player.google.name) {
        playerName = player.google.name;
      } else if (player.yandex && player.yandex.name) {
        playerName = player.yandex.name;
      }
      
      message += `${index + 1}. ${playerName} - ${player.rating} –æ—á–∫–æ–≤ (–∏–≥—Ä: ${player.gamesPlayed}, –ø–æ–±–µ–¥: ${player.gamesWon})\n`;
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const currentUser = await User.findById(ctx.session.user._id);
    
    if (currentUser && currentUser.gamesPlayed > 0) {
      const userRank = await User.countDocuments({
        rating: { $gt: currentUser.rating },
        gamesPlayed: { $gt: 0 }
      }) + 1;
      
      message += `\n*–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:* ${userRank} –º–µ—Å—Ç–æ (${currentUser.rating} –æ—á–∫–æ–≤)`;
    }
    
    await ctx.reply(
      message,
      {
        parse_mode: 'Markdown',
        ...Markup.keyboard([['¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]).resize()
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.',
      Markup.keyboard([['¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]).resize()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
ratingScene.hears('¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', (ctx) => {
  ctx.scene.enter('menu');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
ratingScene.on('message', (ctx) => {
  ctx.reply(
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
    Markup.keyboard([['¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]).resize()
  );
});

module.exports = { ratingScene }; 