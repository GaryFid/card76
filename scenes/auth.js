const { Scenes, Markup } = require('telegraf');
const User = require('../models/user');

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authScene = new Scenes.BaseScene('auth');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
authScene.enter(async (ctx) => {
  try {
    await ctx.reply(
      'üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ P.I.D.R. ‚Äî —Å—ã–≥—Ä–∞–µ–º –ø–∞—Ä—Ç–∏—é?\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: 'https://card76.onrender.com/register' },
              { text: 'üé≤ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://card76.onrender.com/webapp' } }
            ]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

authScene.hears('–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram', async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    let user = await User.findOne({ where: { telegramId } });
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∏–∑ Telegram
    if (!user) {
      let avatarUrl = '';
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä —á–µ—Ä–µ–∑ Telegram API
      if (ctx.from && ctx.from.username) {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å https://t.me/i/userpic/320/{username}.jpg
        avatarUrl = `https://t.me/i/userpic/320/${ctx.from.username}.jpg`;
      }
      user = await User.create({
        telegramId,
        username: ctx.from.username,
        avatar: avatarUrl
      });
    } else if (!user.avatar && ctx.from && ctx.from.username) {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞, –Ω–æ –µ—Å—Ç—å username ‚Äî –æ–±–Ω–æ–≤–∏–º
      const avatarUrl = `https://t.me/i/userpic/320/${ctx.from.username}.jpg`;
      user.avatar = avatarUrl;
      await user.save();
    }
    ctx.session.user = user;
    await ctx.reply(`–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username || '–ò–≥—Ä–æ–∫'}!`);
    return ctx.scene.enter('menu');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

authScene.hears('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', async (ctx) => {
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
});

authScene.hears('–í–æ–π—Ç–∏ –ø–æ –ø–∞—Ä–æ–ª—é', async (ctx) => {
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é.');
});

module.exports = { authScene }; 